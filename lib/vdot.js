

// Table VDOT -> [1500m,Mile,3K,2Mile,5K,10K,15K,HM,M]
const distances = [1500,1609,3000,3219,5000,10000,15000,21082,42165];
const table = {
  '30':	['8:30','9:11','17:56','19:19','30:40','63:46','98:14','2:21:04','4:49:17'],
  '31':	['8:15','8:55','17:27','18:48','29:51','62:03','95:36','2:17:21','4:41:57'],
  '32':	['8:02','8:41','16:59','18:18','29:05','60:26','93:07','2:13:49','4:34:59'],
  '33':	['7:49','8:27','16:33','17:50','28:21','58:54','90:45','2:10:27','4:28:22'],
  '34':	['7:37','8:14','16:09','17:24','27:39','57:26','88:30','2:07:16','4:22:03'],
  '35':	['7:25','8:01','15:45','16:58','27:00','56:03','86:22','2:04:13','4:16:03'],
  '36':	['7:14','7:49','15:23','16:34','26:22','54:44','84:20','2:01:19','4:10:19'],
  '37': ['7:04','7:38','15:01','16:11','25:46','53:29','82:24','1:58:34','4:04:50'],
  '38':	['6:54','7:27','14:41','15:49','25:12','52:17','80:33','1:55:55','3:59:35'],
  '39':	['6:44','7:17','14:21','15:29','24:39','51:09','78:47','1:53:24','3:54:34'],
  '40':	['6:35','7:07','14:03','15:08','24:08','50:03','77:06','1:50:59','3:49:45'],
  '41':	['6:27','6:58','13:45','14:49','23:38','49:01','75:29','1:48:40','3:45:09'],
  '42':	['6:19','6:49','13:28','14:31','23:09','48:01','73:56','1:46:27','3:40:43'],
  '43':	['6:11','6:41','13:11','14:13','22:41','47:04','72:27','1:44:20','3:36:28'],
  '44':	['6:03','6:32','12:55','13:56','22:15','46:09','71:02','1:42:17','3:32:23'],
  '45':	['5:56','6:25','12:40','13:40','21:50','45:16','69:40','1:40:20','3:28:26'],
  '46':	['5:49','6:17','12:26','13:25','21:25','44:25','68:22','1:38:27','3:24:39'],
  '47': ['5:42','6:10','12:12','13:10','21:02','43:36','67:06','1:36:38','3:21:00'],
  '48': ['5:36','6:03','11:58','12:55','20:39','42:50','65:53','1:34:53','3:17:29'],
  '49': ['5:30','5:56','11:45','12:41','20:18','42:04','64:44','1:33:12','3:14:06'],
  '50': ['5:24','5:50','11:33','12:28','19:57','41:21','63:36','1:31:35','3:10:49'],
  '51': ['5:18','5:44','11:21','12:15','19:36','40:39','62:31','1:30:02','3:07:39'],
  '52': ['5:13','5:38','11:09','12:02','19:17','39:59','61:29','1:28:31','3:04:36'],
  '53': ['5:07','5:32','10:58','11:50','18:58','39:20','60:28','1:27:04','3:01:39'],
  '54': ['5:02','5:27','10:47','11:39','18:40','38:42','59:30','1:25:40','2:58:47'],
  '55': ['4:57','5:21','10:37','11:28','18:22','38:06','58:33','1:24:18','2:56:01'],
  '56': ['4:53','5:16','10:27','11:17','18:05','37:31','57:39','1:23:00','2:53:20'],
  '57': ['4:48','5:11','10:17','11:06','17:49','36:57','56:46','1:21:43','2:50:45'],
  '58': ['4:44','5:06','10:08','10:56','17:33','36:24','55:55','1:20:30','2:48:14'],
  '59': ['4:39','5:02','9:58','10:46','17:17','35:52','55:06','1:19:18','2:45:47'],
  '60': ['4:35','4:57','9:50','10:37','17:03','35:22','54:18','1:18:09','2:43:25'],
  '61': ['4:31','4:53','9:41','10:27','16:48','34:52','53:32','1:17:02','2:41:08'],
  '62': ['4:27','4:49','9:33','10:18','16:34','34:23','52:47','1:15:57','2:38:54'],
  '63': ['4:24','4:45','9:25','10:10','16:20','33:55','52:03','1:14:54','2:36:44'],
  '64': ['4:20','4:41','9:17','10:01','16:07','33:28','51:21','1:13:53','2:34:38'],
  '65': ['4:16','4:37','9:09','9:53','15:54','33:01','50:40','1:12:53','2:32:35'],
  '66': ['4:13','4:33','9:02','9:45','15:42','32:35','50:00','1:11:56','2:30:36'],
  '67': ['4:10','4:30','8:55','9:37','15:29','32:11','49:22','1:11:00','2:28:40'],
  '68': ['4:06','4:26','8:48','9:30','15:18','31:46','48:44','1:10:05','2:26:47'],
  '69': ['4:03','4:23','8:41','9:23','15:06','31:23','48:08','1:09:12','2:24:57'],
  '70': ['4:00','4:19','8:34','9:16','14:55','31:00','47:32','1:08:21','2:23:10'],
  '71': ['3:57','4:16','8:28','9:09','14:44','30:38','46:58','1:07:31','2:21:26'],
  '72': ['3:54','4:13','8:22','9:02','14:33','30:16','46:24','1:06:42','2:19:44']
};

export const hms = function(str) {
  const array = str.split(':');
  let value = 0;
  while (array.length) {
    value = 60 * value + Number(array.shift());
  }
  return value;
};

export const mile = 1609.34;

export const vdot = function(distance, time) {
  // Find distance entry
  let index = 0;
  for (; index<distances.length; ++index) {
    const target = distances[index];
    const tol = target / 50;
    if (distance > target - tol && distance < target + tol) {
      break;
    }
    if (target > distance) {
      // Not going to find a better match
      return null;
    }
  }
  // Find the vdot for the time
  let val = 30;
  let below = 0;
  let above = 0;
  for (; val <=72; ++val) {
    let timeStr = table[val][index];
    below = hms(timeStr);
    if (below < time) {
      break;
    }
    above = below;
  }
  const fraction = (above - time)/(above - below);
  return (val -1 + fraction).toFixed(1);
};

export const estimatedTimes = function(vdot) {
  if (Number.isNaN(vdot) || vdot < 30 || vdot > 72) {
    return null;
  }
  const low = Math.floor(vdot);
  const high = Math.ceil(vdot);
  const aboveTimes = table[low].map(hms); 
  if (low === high) {
    return aboveTimes;
  }
  const belowTimes = table[high].map(hms);
  const estimated = aboveTimes.map((x,i) => 
    x - (x - belowTimes[i])*(vdot - low)
  );
  return estimated;
};